from .._util import enable_sharding as enable_sharding, indent as indent, mongo_count as mongo_count
from ..decorators import mongo_retry as mongo_retry
from ..exceptions import NoDataFoundException as NoDataFoundException
from ..serialization.numpy_arrays import COLUMNS as COLUMNS, DATA as DATA, FrametoArraySerializer as FrametoArraySerializer, METADATA as METADATA
from .date_chunker import DateChunker as DateChunker, END as END, START as START
from .passthrough_chunker import PassthroughChunker as PassthroughChunker
from _typeshed import Incomplete
from collections.abc import Generator

logger: Incomplete
CHUNK_STORE_TYPE: str
SYMBOL: str
SHA: str
CHUNK_SIZE: str
CHUNK_COUNT: str
SEGMENT: str
APPEND_COUNT: str
LEN: str
SERIALIZER: str
CHUNKER: str
USERMETA: str
MAX_CHUNK_SIZE: Incomplete
SER_MAP: Incomplete
CHUNKER_MAP: Incomplete

class ChunkStore:
    @classmethod
    def initialize_library(cls, arctic_lib, hashed: bool = ..., **kwargs) -> None: ...
    def _ensure_index(self) -> None: ...
    _arctic_lib: Incomplete
    serializer: Incomplete
    _allow_secondary: Incomplete
    def __init__(self, arctic_lib) -> None: ...
    _collection: Incomplete
    _symbols: Incomplete
    _mdata: Incomplete
    _audit: Incomplete
    def _reset(self) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __str__(self): ...
    def __repr__(self): ...
    def _checksum(self, fields, data): ...
    def delete(self, symbol, chunk_range: Incomplete | None = ..., audit: Incomplete | None = ...) -> None: ...
    def list_symbols(self, partial_match: Incomplete | None = ...): ...
    def _get_symbol_info(self, symbol): ...
    def rename(self, from_symbol, to_symbol, audit: Incomplete | None = ...) -> None: ...
    def read(self, symbol, chunk_range: Incomplete | None = ..., filter_data: bool = ..., **kwargs): ...
    def read_audit_log(self, symbol: Incomplete | None = ...): ...
    def write(self, symbol, item, metadata: Incomplete | None = ..., chunker=..., audit: Incomplete | None = ..., **kwargs) -> None: ...
    def __update(self, sym, item, metadata: Incomplete | None = ..., combine_method: Incomplete | None = ..., chunk_range: Incomplete | None = ..., audit: Incomplete | None = ...) -> None: ...
    def append(self, symbol, item, upsert: bool = ..., metadata: Incomplete | None = ..., audit: Incomplete | None = ..., **kwargs): ...
    def update(self, symbol, item, metadata: Incomplete | None = ..., chunk_range: Incomplete | None = ..., upsert: bool = ..., audit: Incomplete | None = ..., **kwargs): ...
    def get_info(self, symbol): ...
    def read_metadata(self, symbol): ...
    def write_metadata(self, symbol, metadata) -> None: ...
    def get_chunk_ranges(self, symbol, chunk_range: Incomplete | None = ..., reverse: bool = ...) -> Generator[Incomplete, None, None]: ...
    def iterator(self, symbol, chunk_range: Incomplete | None = ..., **kwargs) -> Generator[Incomplete, None, None]: ...
    def reverse_iterator(self, symbol, chunk_range: Incomplete | None = ..., **kwargs) -> Generator[Incomplete, None, None]: ...
    def stats(self): ...
    def has_symbol(self, symbol): ...
