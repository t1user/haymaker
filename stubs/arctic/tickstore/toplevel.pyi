from ..date import CLOSED_CLOSED as CLOSED_CLOSED, DateRange as DateRange, OPEN_OPEN as OPEN_OPEN, mktz as mktz, to_dt as to_dt
from ..decorators import mongo_retry as mongo_retry
from ..exceptions import LibraryNotFoundException as LibraryNotFoundException, NoDataFoundException as NoDataFoundException, OverlappingDataException as OverlappingDataException, UnhandledDtypeException as UnhandledDtypeException
from _typeshed import Incomplete
from typing import NamedTuple

logger: Incomplete

class TickStoreLibrary(NamedTuple):
    library: Incomplete
    date_range: Incomplete
TICK_STORE_TYPE: str
PATTERN: str
YEAR_REGEX: Incomplete
end_time_min: Incomplete

class DictList:
    lst: Incomplete
    key: Incomplete
    def __init__(self, lst, key) -> None: ...
    def __len__(self): ...
    def __getitem__(self, idx): ...

class TopLevelTickStore:
    @classmethod
    def initialize_library(cls, arctic_lib, **kwargs) -> None: ...
    def _ensure_index(self) -> None: ...
    def _add_libraries(self) -> None: ...
    _arctic_lib: Incomplete
    def __init__(self, arctic_lib) -> None: ...
    _collection: Incomplete
    def _reset(self) -> None: ...
    def add(self, date_range, library_name) -> None: ...
    def read(self, symbol, date_range, columns: Incomplete | None = ..., include_images: bool = ...): ...
    def write(self, symbol, data) -> None: ...
    def list_symbols(self, date_range): ...
    def get_name(self): ...
    def _get_libraries(self, date_range): ...
    def _slice(self, data, start, end): ...
    def _get_library_metadata(self, date_range): ...
