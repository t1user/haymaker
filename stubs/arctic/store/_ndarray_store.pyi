from .._compression import compress_array as compress_array, decompress as decompress
from .._config import ARCTIC_FORWARD_POINTERS_CFG as ARCTIC_FORWARD_POINTERS_CFG, ARCTIC_FORWARD_POINTERS_RECONCILE as ARCTIC_FORWARD_POINTERS_RECONCILE, CHECK_CORRUPTION_ON_APPEND as CHECK_CORRUPTION_ON_APPEND, FW_POINTERS_CONFIG_KEY as FW_POINTERS_CONFIG_KEY, FW_POINTERS_REFS_KEY as FW_POINTERS_REFS_KEY, FwPointersCfg as FwPointersCfg
from .._util import get_fwptr_config as get_fwptr_config, mongo_count as mongo_count
from ..decorators import mongo_retry as mongo_retry
from ..exceptions import DataIntegrityException as DataIntegrityException, UnhandledDtypeException as UnhandledDtypeException
from ._version_store_utils import _fast_check_corruption as _fast_check_corruption, checksum as checksum, version_base_or_id as version_base_or_id
from _typeshed import Incomplete

logger: Incomplete
_CHUNK_SIZE: Incomplete
_APPEND_SIZE: Incomplete
_APPEND_COUNT: int

def _promote_struct_dtypes(dtype1, dtype2): ...
def _attempt_update_unchanged(symbol, unchanged_segment_ids, collection, version, previous_version) -> None: ...
def _resize_with_dtype(arr, dtype): ...
def set_corruption_check_on_append(enable) -> None: ...
def _update_fw_pointers(collection, symbol, version, previous_version, is_append, shas_to_add: Incomplete | None = ...) -> None: ...
def _spec_fw_pointers_aware(symbol, version, from_index: Incomplete | None = ..., to_index: Incomplete | None = ...): ...
def _fw_pointers_convert_append_to_write(previous_version): ...

class NdarrayStore:
    TYPE: str
    @classmethod
    def initialize_library(cls, *args, **kwargs) -> None: ...
    @staticmethod
    def _ensure_index(collection) -> None: ...
    def can_delete(self, version, symbol): ...
    def can_read(self, version, symbol): ...
    @staticmethod
    def can_write_type(data): ...
    def can_write(self, version, symbol, data): ...
    def _dtype(self, string, metadata: Incomplete | None = ...): ...
    def _index_range(self, version, symbol, from_version: Incomplete | None = ..., **kwargs): ...
    def get_info(self, version): ...
    @staticmethod
    def read_options(): ...
    def read(self, arctic_lib, version, symbol, read_preference: Incomplete | None = ..., **kwargs): ...
    def _do_read(self, collection, version, symbol, index_range: Incomplete | None = ...): ...
    def _promote_types(self, dtype, dtype_str): ...
    def append(self, arctic_lib, version, symbol, item, previous_version, dtype: Incomplete | None = ..., dirty_append: bool = ...) -> None: ...
    def _do_append(self, collection, version, symbol, item, previous_version, dirty_append) -> None: ...
    def _concat_and_rewrite(self, collection, version, symbol, item, previous_version) -> None: ...
    @staticmethod
    def check_written(collection, symbol, version) -> None: ...
    def checksum(self, item): ...
    def write(self, arctic_lib, version, symbol, item, previous_version, dtype: Incomplete | None = ...) -> None: ...
    def _do_write(self, collection, version, symbol, item, previous_version, segment_offset: int = ...) -> None: ...
    def _segment_index(self, new_data, existing_index, start, new_segments) -> None: ...
