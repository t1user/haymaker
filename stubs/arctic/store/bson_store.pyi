from .._util import enable_sharding as enable_sharding, mongo_count as mongo_count
from ..decorators import mongo_retry as mongo_retry
from _typeshed import Incomplete

logger: Incomplete
BSON_STORE_TYPE: str

class BSONStore:
    _arctic_lib: Incomplete
    def __init__(self, arctic_lib) -> None: ...
    def enable_sharding(self) -> None: ...
    @classmethod
    def initialize_library(cls, arctic_lib, hashed: bool = ..., **kwargs) -> None: ...
    _collection: Incomplete
    def _reset(self) -> None: ...
    def stats(self): ...
    def find(self, *args, **kwargs): ...
    def find_one(self, *args, **kwargs): ...
    def insert_one(self, document, **kwargs): ...
    def insert_many(self, documents, **kwargs): ...
    def delete_one(self, filter, **kwargs): ...
    def delete_many(self, filter, **kwargs): ...
    def update_one(self, filter, update, **kwargs): ...
    def update_many(self, filter, update, **kwargs): ...
    def replace_one(self, filter, replacement, **kwargs): ...
    def find_one_and_replace(self, filter, replacement, **kwargs): ...
    def find_one_and_update(self, filter, update, **kwargs): ...
    def find_one_and_delete(self, filter, **kwargs): ...
    def bulk_write(self, requests, **kwargs): ...
    def count(self, filter, **kwargs): ...
    def aggregate(self, pipeline, **kwargs): ...
    def distinct(self, key, **kwargs): ...
    def create_index(self, keys, **kwargs): ...
    def drop_index(self, index_or_name): ...
    def index_information(self): ...
