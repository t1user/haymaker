from .._config import FW_POINTERS_CONFIG_KEY as FW_POINTERS_CONFIG_KEY, FW_POINTERS_REFS_KEY as FW_POINTERS_REFS_KEY, FwPointersCfg as FwPointersCfg, STRICT_WRITE_HANDLER_MATCH as STRICT_WRITE_HANDLER_MATCH
from .._util import enable_sharding as enable_sharding, get_fwptr_config as get_fwptr_config, indent as indent, mongo_count as mongo_count
from ..date import datetime_to_ms as datetime_to_ms, mktz as mktz, ms_to_datetime as ms_to_datetime
from ..decorators import mongo_retry as mongo_retry
from ..exceptions import ArcticException as ArcticException, DuplicateSnapshotException as DuplicateSnapshotException, NoDataFoundException as NoDataFoundException
from ..hooks import log_exception as log_exception
from ._pickle_store import PickleStore as PickleStore
from ._version_store_utils import _get_symbol_pointer_cfgs as _get_symbol_pointer_cfgs, cleanup as cleanup, get_symbol_alive_shas as get_symbol_alive_shas
from .versioned_item import VersionedItem as VersionedItem
from _typeshed import Incomplete

logger: Incomplete
VERSION_STORE_TYPE: str
_TYPE_HANDLERS: Incomplete
ARCTIC_VERSION: Incomplete
ARCTIC_VERSION_NUMERICAL: Incomplete

def register_version(version, numerical) -> None: ...
def register_versioned_storage(storageClass): ...

class VersionStore:
    _bson_handler: Incomplete
    @classmethod
    def initialize_library(cls, arctic_lib, hashed: bool = ..., **kwargs) -> None: ...
    def _last_version_seqnum(self, symbol): ...
    def _ensure_index(self) -> None: ...
    _arctic_lib: Incomplete
    _allow_secondary: Incomplete
    _with_strict_handler: Incomplete
    def __init__(self, arctic_lib) -> None: ...
    @property
    def _with_strict_handler_match(self): ...
    _collection: Incomplete
    _audit: Incomplete
    _snapshots: Incomplete
    _versions: Incomplete
    _version_nums: Incomplete
    def _reset(self) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def __str__(self): ...
    def __repr__(self): ...
    def _read_preference(self, allow_secondary): ...
    def list_symbols(self, all_symbols: bool = ..., snapshot: Incomplete | None = ..., regex: Incomplete | None = ..., **kwargs): ...
    def has_symbol(self, symbol, as_of: Incomplete | None = ...): ...
    def read_audit_log(self, symbol: Incomplete | None = ..., message: Incomplete | None = ...): ...
    def list_versions(self, symbol: Incomplete | None = ..., snapshot: Incomplete | None = ..., latest_only: bool = ...): ...
    def _find_snapshots(self, parent_ids): ...
    def _read_handler(self, version, symbol): ...
    @staticmethod
    def handler_can_write_type(handler, data): ...
    def _write_handler(self, version, symbol, data, **kwargs): ...
    def read(self, symbol, as_of: Incomplete | None = ..., date_range: Incomplete | None = ..., from_version: Incomplete | None = ..., allow_secondary: Incomplete | None = ..., **kwargs): ...
    def get_info(self, symbol, as_of: Incomplete | None = ...): ...
    @staticmethod
    def handler_supports_read_option(handler, option): ...
    def get_arctic_version(self, symbol, as_of: Incomplete | None = ...): ...
    def _do_read(self, symbol, version, from_version: Incomplete | None = ..., **kwargs): ...
    _do_read_retry: Incomplete
    def read_metadata(self, symbol, as_of: Incomplete | None = ..., allow_secondary: Incomplete | None = ...): ...
    def _read_metadata(self, symbol, as_of: Incomplete | None = ..., read_preference: Incomplete | None = ...): ...
    def _insert_version(self, version) -> None: ...
    def append(self, symbol, data, metadata: Incomplete | None = ..., prune_previous_version: bool = ..., upsert: bool = ..., **kwargs): ...
    def write(self, symbol, data, metadata: Incomplete | None = ..., prune_previous_version: bool = ..., **kwargs): ...
    def _add_new_version_using_reference(self, symbol, new_version, reference_version, prune_previous_version): ...
    def write_metadata(self, symbol, metadata, prune_previous_version: bool = ..., **kwargs): ...
    def restore_version(self, symbol, as_of, prune_previous_version: bool = ...): ...
    def _find_prunable_version_ids(self, symbol, keep_mins): ...
    def _find_base_version_ids(self, symbol, version_ids): ...
    def _prune_previous_versions(self, symbol, keep_mins: int = ..., keep_version: Incomplete | None = ..., new_version_shas: Incomplete | None = ...) -> None: ...
    def _delete_version(self, symbol, version_num, do_cleanup: bool = ...) -> None: ...
    def delete(self, symbol) -> None: ...
    def _write_audit(self, user, message, changed_version) -> None: ...
    def snapshot(self, snap_name, metadata: Incomplete | None = ..., skip_symbols: Incomplete | None = ..., versions: Incomplete | None = ...) -> None: ...
    def delete_snapshot(self, snap_name) -> None: ...
    def list_snapshots(self): ...
    def stats(self): ...
    def _fsck(self, dry_run) -> None: ...
    def _cleanup_unreachable_shas(self, dry_run) -> None: ...
    def _cleanup_orphaned_chunks(self, dry_run) -> None: ...
    def _cleanup_orphaned_versions(self, dry_run) -> None: ...
