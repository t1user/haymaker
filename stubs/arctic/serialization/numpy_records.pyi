from .._config import FAST_CHECK_DF_SERIALIZABLE as FAST_CHECK_DF_SERIALIZABLE
from .._util import NP_OBJECT_DTYPE as NP_OBJECT_DTYPE
from ..exceptions import ArcticException as ArcticException
from _typeshed import Incomplete

log: Incomplete
PD_VER: Incomplete
DTN64_DTYPE: str

def set_fast_check_df_serializable(config) -> None: ...
def _to_primitive(arr, string_max_len: Incomplete | None = ..., forced_dtype: Incomplete | None = ...): ...
def _multi_index_to_records(index, empty_index): ...

class PandasSerializer:
    def _index_to_records(self, df): ...
    def _index_from_records(self, recarr): ...
    def _to_records(self, df, string_max_len: Incomplete | None = ..., forced_dtype: Incomplete | None = ...): ...
    def fast_check_serializable(self, df): ...
    def can_convert_to_records_without_objects(self, df, symbol): ...
    def serialize(self, item, string_max_len: Incomplete | None = ..., forced_dtype: Incomplete | None = ...) -> None: ...
    def deserialize(self, item, force_bytes_to_unicode: bool = ...) -> None: ...

class SeriesSerializer(PandasSerializer):
    TYPE: str
    def _column_data(self, s): ...
    def deserialize(self, item, force_bytes_to_unicode: bool = ...): ...
    def serialize(self, item, string_max_len: Incomplete | None = ..., forced_dtype: Incomplete | None = ...): ...

class DataFrameSerializer(PandasSerializer):
    TYPE: str
    def _column_data(self, df): ...
    def deserialize(self, item, force_bytes_to_unicode: bool = ...): ...
    def serialize(self, item, string_max_len: Incomplete | None = ..., forced_dtype: Incomplete | None = ...): ...
