import abc
from .._compression import compress as compress
from .._config import MAX_DOCUMENT_SIZE as MAX_DOCUMENT_SIZE
from .._util import NP_OBJECT_DTYPE as NP_OBJECT_DTYPE
from ..exceptions import ArcticSerializationException as ArcticSerializationException
from _typeshed import Incomplete
from arctic._config import ARCTIC_AUTO_EXPAND_CHUNK_SIZE as ARCTIC_AUTO_EXPAND_CHUNK_SIZE
from arctic.serialization.numpy_records import PandasSerializer as PandasSerializer
from collections.abc import Generator

ABC: Incomplete
log: Incomplete

def incremental_checksum(item, curr_sha: Incomplete | None = ..., is_bytes: bool = ...): ...

class LazyIncrementalSerializer(ABC, metaclass=abc.ABCMeta):
    input_data: Incomplete
    chunk_size: Incomplete
    _serializer: Incomplete
    _initialized: bool
    _checksum: Incomplete
    def __init__(self, serializer, input_data, chunk_size) -> None: ...
    @abc.abstractmethod
    def __len__(self): ...
    @property
    @abc.abstractmethod
    def generator(self): ...
    @property
    @abc.abstractmethod
    def generator_bytes(self): ...
    @property
    @abc.abstractmethod
    def serialize(self): ...

class IncrementalPandasToRecArraySerializer(LazyIncrementalSerializer):
    string_max_len: Incomplete
    _dtype: Incomplete
    _shape: Incomplete
    _rows_per_chunk: int
    _total_chunks: int
    _has_string_object: bool
    _lock: Incomplete
    def __init__(self, serializer, input_data, chunk_size, string_max_len: Incomplete | None = ...) -> None: ...
    def _dtype_convert_to_max_len_string(self, input_ndtype, fname): ...
    def _get_dtype(self): ...
    _initialized: bool
    def _lazy_init(self) -> None: ...
    @staticmethod
    def _calculate_rows_per_chunk(max_chunk_size, chunk): ...
    def __len__(self): ...
    @property
    def shape(self): ...
    @property
    def dtype(self): ...
    @property
    def rows_per_chunk(self): ...
    _checksum: Incomplete
    def checksum(self, from_idx, to_idx): ...
    def generator(self, from_idx: Incomplete | None = ..., to_idx: Incomplete | None = ...): ...
    def generator_bytes(self, from_idx: Incomplete | None = ..., to_idx: Incomplete | None = ...): ...
    def _generator(self, from_idx, to_idx, get_bytes: bool = ...) -> Generator[Incomplete, None, None]: ...
    def serialize(self): ...
