from _typeshed import Incomplete

VERSION_STORE: Incomplete
METADATA_STORE: Incomplete
TICK_STORE: Incomplete
CHUNK_STORE: Incomplete

def register_library_type(name, type_) -> None: ...

class Arctic:
    DB_PREFIX: str
    METADATA_COLL: str
    METADATA_DOC_ID: str
    _MAX_CONNS: int
    __conn: Incomplete
    _application_name: Incomplete
    _library_cache: Incomplete
    _allow_secondary: Incomplete
    _socket_timeout: Incomplete
    _connect_timeout: Incomplete
    _server_selection_timeout: Incomplete
    _lock: Incomplete
    _pid: Incomplete
    _pymongo_kwargs: Incomplete
    _cache: Incomplete
    _given_instance: bool
    mongo_host: Incomplete
    _adminDB: Incomplete
    def __init__(self, mongo_host, app_name=..., allow_secondary: bool = ..., socketTimeoutMS=..., connectTimeoutMS=..., serverSelectionTimeoutMS=..., **kwargs) -> None: ...
    @property
    def _conn(self): ...
    def reset(self) -> None: ...
    def __str__(self): ...
    def __repr__(self): ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def is_caching_enabled(self): ...
    def list_libraries(self, newer_than_secs: Incomplete | None = ...): ...
    def _list_libraries(self): ...
    def _list_libraries_cached(self, newer_than_secs: Incomplete | None = ...): ...
    def reload_cache(self) -> None: ...
    def library_exists(self, library): ...
    def _sanitize_lib_name(self, library): ...
    def initialize_library(self, library, lib_type=..., **kwargs) -> None: ...
    def delete_library(self, library) -> None: ...
    def get_library(self, library): ...
    def __getitem__(self, key): ...
    def set_quota(self, library, quota) -> None: ...
    def get_quota(self, library): ...
    def check_quota(self, library) -> None: ...
    def rename_library(self, from_lib, to_lib) -> None: ...
    def get_library_type(self, lib): ...

class ArcticLibraryBinding:
    DB_PREFIX: Incomplete
    TYPE_FIELD: str
    QUOTA: str
    quota: Incomplete
    quota_countdown: int
    @classmethod
    def _parse_db_lib(cls, library): ...
    arctic: Incomplete
    _curr_conn: Incomplete
    _lock: Incomplete
    library: Incomplete
    database_name: Incomplete
    def __init__(self, arctic, library) -> None: ...
    @property
    def _db(self): ...
    @property
    def _library_coll(self): ...
    def __str__(self): ...
    def __repr__(self): ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def _auth(self, database) -> None: ...
    def reset_auth(self) -> None: ...
    def get_name(self): ...
    def get_top_level_collection(self): ...
    def set_quota(self, quota_bytes) -> None: ...
    def get_quota(self): ...
    def check_quota(self): ...
    def get_library_type(self): ...
    def set_library_type(self, lib_type) -> None: ...
    def get_library_metadata(self, field): ...
    def set_library_metadata(self, field, value) -> None: ...
