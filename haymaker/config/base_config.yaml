coldstart: False # meant to be set from CLI, if necessary
reset: False # doesn't really make sense to change here

ignore_errors:
  - 2104  # Market data farm connection is ok
  - 2106  # Data farm connection is OK
  - 2107  # Data farm connection is inactive but should be available upon demand
  - 2108  # Market data farm [...] is inactive but [...~ok]
  - 2158  # Sec-def data farm connection is OK
  - 2110  # Connectivity between Trader Workstation and server is broken. It will be restored automatically.
  - 202  # Order cancelled
  # Consider silencing 2103 - Market data connection is broken

log_broker: False # if additional logger with all broker messages should be created

app:
  restart_time: 30 # after disconnection, time to wait before reconnection attempt
  host: 127.0.0.1
  port: 4002
  clientId: 0 # do not change
  appStartupTime: 0
  appTimeout: 20
  retryDelay: 2
  probeContract:
    !!python/object/apply:ib_insync.Forex
    - EURUSD
  probeTimeout: 4
  future_roll_time: [10, 0]   # time when future rolls are executed, must be a list [hour, minute]
  future_roll_timezone: "America/New_York" # must be a string acceptable by ZoneInfo
  
controller:
  use_blotter: True
  log_order_events: False
  # interval at which sync will be performed
  sync_frequency: 900 # 15min
  # for strategy with zero position, cancel existing orders
  cancel_stray_orders: True
  # delay in sec after which controller will verify if transaction was executed correctly;
  # zero or comment-out for no verification
  execution_verification_delay: 15 # in seconds

# best left untouched
state_machine:
  save_delay: 1 # don't save strategy data more often than that (in secs)
  order_container_max_size: 0 # zero means no limit (strongly recommended)
  strategy_collection_name: "strategies"
  order_collection_name: "orders"
  
streamer:
  # timeout triggered after streamer hasn't received data for given amount of seconds
  timeout:
    # behaviour after timeout triggered
    debug: False # debug: True -> log; debug: False -> restart
    # number of seconds after which timeout triggered
    time: 300 # zero means no timeout, can also be set individually on every streamer instance

# set-up saver used by Blotter; must have keys: class and kwds
# saver will be initialized as class(**kwds) and passed to Blotter
blotter:
  class: CsvSaver
  kwds:
    folder: blotter
    name: blotter
    timestamp: False
    
# this is general definition of savers that are available to be used
# they will not be instantiated unless used by an object inheriting from Atom
saver:
  ArcticSaver:
    host: localhost
    library: test_log
  MongoSaver:
    host: localhost
    port: 27017
    db: test_data

# All savers saving to files will create sub-directories here:
data_folder:
  ib_data # folder inside home folder, will be created if doesn't exist
  
# These are default order params that will be used by every execution model
# unless different orders are passes to exec model's __init__
open_order:
  algoStrategy: Adaptive
  algoParams:
  - !!python/object/apply:ib_insync.TagValue
      - adaptivePriority
      - Normal
  tif: Day
  # outsideRth: True
    
close_order:
  tif: GTC
  # outsideRth: True
    
stop_order:
  outsideRth: True
  tif: GTC

tp_order:
  # don't use adaptive orders here as not compliant with OCA
  tif: GTC
  # outsideRth: True # seems never accepted
  
# all linked orders will use this oca_type (as per IB definition)
oca_type: 1
